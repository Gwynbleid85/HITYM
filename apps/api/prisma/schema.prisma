// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String  @id @default(uuid())
  email          String  @unique
  // hashed password (do not store in plain text!)
  password       String
  name           String
  bio            String?
  // link to the user's profile picture
  profilePicture String?

  lastActive DateTime?

  // Last position
  lastLatitude  Float?
  lastLongitude Float?

  inGroups       Group[]       @relation("UsersInGroup")
  status         UserStatus[]  @relation("UserStatus")
  places         Place[]       @relation("FavoritePlaces")
  placeCreatedBy Place[]       @relation("PlaceCreatedBy")
  groupCreatedBy Group[]       @relation("GroupCreatedBy")
  eventCreatedBy GroupEvent[]  @relation("EventCreatedBy")
  invitedToGroup GroupInvite[] @relation("InvitedUser")
  invitedBy      GroupInvite[] @relation("InvitedBy")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model UserStatus {
  id     String @id @default(uuid())
  user   User   @relation("UserStatus", fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
  status String
  color  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Place {
  id          String  @id @default(uuid())
  name        String
  description String?
  imageUrl    String?

  latitude  Float
  longitude Float

  events GroupEvent[] @relation("EventsInPlace")
  users  User[]       @relation("FavoritePlaces")

  createdBy   User     @relation("PlaceCreatedBy", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Group {
  id          String       @id @default(uuid())
  name        String
  description String?
  imageUrl    String?
  users       User[]       @relation("UsersInGroup")
  events      GroupEvent[] @relation("EventsInGroup")

  createdBy   User   @relation("GroupCreatedBy", fields: [createdById], references: [id])
  createdById String

  inivites GroupInvite[] @relation("InviteToGroup")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GroupEvent {
  id          String   @id @default(uuid())
  name        String
  description String?
  groupId     String
  date        DateTime
  place       Place    @relation("EventsInPlace", fields: [placeId], references: [id])
  group       Group    @relation("EventsInGroup", fields: [groupId], references: [id])
  imageUrl    String?
  craetedBy   User     @relation("EventCreatedBy", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  placeId     String
}

model GroupInvite {
  id String @id @default(uuid())

  groupId String
  group   Group  @relation("InviteToGroup", fields: [groupId], references: [id])

  invitedUserId String
  invitedUser   User   @relation("InvitedUser", fields: [invitedUserId], references: [id])

  invitedById String
  invitedBy User   @relation("InvitedBy", fields: [invitedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
